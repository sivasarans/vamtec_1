To build the **Leave and Permission Management System** easily, follow these **shortened, step-by-step instructions**:

---

### **Step 1: Project Setup (Day 1-2)**  
1. **Frontend**:  
   - Initialize a React app: `npx create-react-app leave-management`.  
   - Add libraries: `npm install react-router-dom axios`.  

2. **Backend**:  
   - Initialize Node.js: `npm init`.  
   - Install dependencies:  
     ```bash
     npm install express cors pg jsonwebtoken bcrypt dotenv
     ```
   - Set up PostgreSQL and connect using `pg` module.  

---

### **Step 2: Database Design (Day 3)**  
Define the tables:  
- **Users**: `id`, `name`, `email`, `role`, `password`.  
- **Roles**: `id`, `role_name`.  
- **LeaveRequests**: `id`, `user_id`, `type`, `start_date`, `end_date`, `status`, `reason`.  
- **Permissions**: `id`, `user_id`, `date`, `duration`, `status`, `reason`.  

**Example SQL**:  
```sql
CREATE TABLE users (
  id SERIAL PRIMARY KEY,
  name VARCHAR(100),
  email VARCHAR(100) UNIQUE,
  role VARCHAR(20),
  password VARCHAR(255)
);

CREATE TABLE leave_requests (
  id SERIAL PRIMARY KEY,
  user_id INT REFERENCES users(id),
  type VARCHAR(50),
  start_date DATE,
  end_date DATE,
  status VARCHAR(20),
  reason TEXT
);
```

---

### **Step 3: Backend APIs (Day 4-6)**  
1. Set up Express server:  
   ```javascript
   const express = require("express");
   const app = express();
   app.use(express.json());
   app.listen(5000, () => console.log("Server running on port 5000"));
   ```

2. Create endpoints:  
   - **Authentication**: `/api/auth/login`, `/api/auth/signup`.  
   - **Leave Requests**: `/api/leave-requests` (GET, POST, PUT).  
   - **Permissions**: `/api/permissions` (GET, POST).  

**Example**: Add leave request:  
```javascript
app.post("/api/leave-requests", (req, res) => {
  const { user_id, type, start_date, end_date, reason } = req.body;
  const query = `
    INSERT INTO leave_requests (user_id, type, start_date, end_date, reason, status)
    VALUES ($1, $2, $3, $4, $5, 'Pending')
  `;
  db.query(query, [user_id, type, start_date, end_date, reason], (err) => {
    if (err) return res.status(500).send(err.message);
    res.status(200).send("Leave request created");
  });
});
```

---

### **Step 4: Frontend (Day 7-10)**  
1. Create React components:  
   - Login: `/Login.js`.  
   - Dashboard: `/Dashboard.js`.  
   - Leave Application: `/ApplyLeave.js`.  

2. Implement routing:  
   ```javascript
   import { BrowserRouter as Router, Route, Switch } from "react-router-dom";
   <Router>
     <Switch>
       <Route path="/login" component={Login} />
       <Route path="/dashboard" component={Dashboard} />
     </Switch>
   </Router>;
   ```

3. Fetch APIs using `axios`. Example:  
   ```javascript
   axios.post("/api/leave-requests", requestData).then((res) => console.log(res.data));
   ```

---

### **Step 5: Role-Based Access Control (Day 11)**  
1. Add role verification middleware in the backend:  
   ```javascript
   const verifyRole = (roles) => (req, res, next) => {
     const userRole = req.user.role;
     if (!roles.includes(userRole)) return res.status(403).send("Access denied");
     next();
   };
   ```

2. Restrict frontend views by roles:  
   ```javascript
   if (user.role === "Admin") showAdminPanel();
   ```

---

### **Step 6: Testing & Deployment (Day 12-14)**  
1. **Testing**:  
   - Use `Postman` to test API endpoints.  
   - Test UI workflows manually.  

2. **Deployment**:  
   - Backend: Host on AWS/Heroku.  
   - Frontend: Deploy via Netlify or Vercel.  
   - Configure environment variables for sensitive data.  

---

### **Quick Recap Milestones**  
- **Day 1-3**: Setup and database schema.  
- **Day 4-6**: Backend API implementation.  
- **Day 7-10**: Frontend development.  
- **Day 11**: Role-based access.  
- **Day 12-14**: Testing and deployment.  

This simplified structure ensures smooth and quick development. Let me know if you need a detailed example for any part!